/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.brightcove.rentallicensesample;

import android.annotation.TargetApi;
import android.net.Uri;
import android.os.Build;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.util.Log;

import com.google.android.exoplayer2.ExoPlayerLibraryInfo;
import com.google.android.exoplayer2.drm.ExoMediaDrm;
import com.google.android.exoplayer2.drm.MediaDrmCallback;
import com.google.android.exoplayer2.upstream.DataSourceInputStream;
import com.google.android.exoplayer2.upstream.DataSpec;
import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
import com.google.android.exoplayer2.upstream.HttpDataSource;
import com.google.android.exoplayer2.util.Util;

import java.io.IOException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.UUID;

import static com.brightcove.rentallicensesample.DrmUtil.executePost;

/**
 * Provides a concrete implementation of {@link BrightcoveMediaDrmCallback} that use Widevine
 * to support playback of DRM protected content in ExoPlayer 2.
 * @author rsubramaniam
 */
@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
public class WidevineMediaDrmCallback extends BrightcoveMediaDrmCallback implements MediaDrmCallback {
    /**
     * The identifier that will be used to tag all log generated by this class.
     */
    private static final String TAG = WidevineMediaDrmCallback.class.getSimpleName();

    /**
     * Constructs a new Widevine based Media DRM callback handler.
     *
     * @param defaultUrl the fully qualified URL to the DRM license service that will be used if
     *                   the request does include an URL.
     */
    public WidevineMediaDrmCallback(@Nullable String defaultUrl) {
        super(defaultUrl);
    }

    public static WidevineMediaDrmCallback create(String licenseUrl) {
        /*String licenseUrl = null;
        Map<String, Object> videoProperties = new HashMap<>();
        Map<String, Object> sourceProperties = new HashMap<>();

        Map keySystems = (Map) sourceProperties.get("key_systems");

        if (keySystems != null) {
            Map widevineKeySystem = (Map) keySystems.get("com.widevine.alpha");

            if (widevineKeySystem != null) {
                licenseUrl = (String) widevineKeySystem.get("license_url");
            }
        }

        if (licenseUrl == null) {
            licenseUrl = (String) videoProperties.get(DEFAULT_URL);
        }

        if (licenseUrl == null) {
            String videoId = (String) videoProperties.get("id");

            if (TextUtils.isEmpty(videoId)) {
                Log.e(TAG, "Video ID required for Brightcove Widevine Modular videos.");
            } else {
                licenseUrl = BRIGHTCOVE_BASE_URL + videoId;
            }
        }*/

        WidevineMediaDrmCallback widevineMediaDrmCallback = new WidevineMediaDrmCallback(licenseUrl);
        //widevineMediaDrmCallback.setVideoHeaders(videoProperties);

        return widevineMediaDrmCallback;
    }

    @Override
    public byte[] executeProvisionRequest(UUID uuid, @NonNull ExoMediaDrm.ProvisionRequest request) throws IOException {
        return executeProvisionRequest(request.getDefaultUrl(), request.getData());
    }

    @Override
    public byte[] executeKeyRequest(UUID uuid, @NonNull ExoMediaDrm.KeyRequest request) throws IOException {
        return executeKeyRequest(request.getDefaultUrl(), request.getData());
    }

    protected byte[] executeProvisionRequest(String url, byte[] data) throws IOException {
        if (TextUtils.isEmpty(url)) {
            url = defaultUrl;
        }

        return executePost(url + "&signedRequest=" + new String(data), null, null);
    }

    protected byte[] executeKeyRequest(String url, byte[] data) throws IOException {
        if (TextUtils.isEmpty(url)) {
            url = defaultUrl;
        }

        HashMap<String, String> requestHeaders = new HashMap<>(REQUEST_HEADERS);
        Map<String, String> headerMap = getOptionalHeaders();
        if (headerMap != null) {
            requestHeaders.putAll(headerMap);
        }

        return executePost(url, data, requestHeaders);
    }

}
